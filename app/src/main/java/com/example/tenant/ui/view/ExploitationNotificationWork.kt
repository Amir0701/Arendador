package com.example.tenant.ui.view

import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import androidx.core.app.NotificationCompat
import androidx.core.app.NotificationManagerCompat
import androidx.room.Room
import androidx.work.CoroutineWorker
import androidx.work.Worker
import androidx.work.WorkerParameters
import com.example.tenant.R
import com.example.tenant.data.AppDatabase
import java.util.*

class ExploitationNotificationWork(val appContext: Context, parameters: WorkerParameters): CoroutineWorker(appContext, parameters) {
    override suspend fun doWork(): Result {
        try {
            val db = Room.databaseBuilder(
                applicationContext,
                AppDatabase::class.java, "TenantDB"
            ).build()

            val dao = db.getDao()

            val calendar = Calendar.getInstance()
            val year = calendar.get(Calendar.YEAR)
            val month = calendar.get(Calendar.MONTH)
            val day = calendar.get(Calendar.DAY_OF_MONTH)

            val exploitations = dao.getAllExploitation()

            exploitations.forEach {exploitation->
                val c = Calendar.getInstance()
                c.time = exploitation.dateOfStart
                val expYear = c.get(Calendar.YEAR)
                val expMonth = c.get(Calendar.MONTH)
                val expDay = c.get(Calendar.DAY_OF_MONTH)

                if(year == expYear && expMonth == month && day == expDay){
                    val obbject = dao.getObjectById(exploitation.objectId)
                    sendNotification(appContext, obbject.name, exploitation.name)
                }
            }
        }catch (e: Exception){
            Result.failure()
        }

        return Result.success()
    }

    private fun sendNotification(appContext: Context, objectName: String, expName: String){
        val notificationChannel = NotificationChannel("expo", "notif", NotificationManager.IMPORTANCE_DEFAULT)
        val notificationManager = appContext.getSystemService(NotificationManager::class.java)
        notificationManager.createNotificationChannel(notificationChannel)

        val notificationCompatBuilder: NotificationCompat.Builder =
            NotificationCompat.Builder(appContext, "expo")
        notificationCompatBuilder.setContentTitle(expName)
        notificationCompatBuilder.setContentText("Сегодня начало эксплуатации в объекте $objectName")
        notificationCompatBuilder.setSmallIcon(R.drawable.ic_launcher_foreground)
        notificationCompatBuilder.setAutoCancel(true)
        val notificationManagerCompat: NotificationManagerCompat = NotificationManagerCompat.from(appContext)
        notificationManagerCompat.notify(1, notificationCompatBuilder.build())
    }
}