package com.example.tenant.ui.view

import android.app.DatePickerDialog
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.EditText
import com.example.tenant.R
import java.text.SimpleDateFormat
import java.util.*

class ExploitationFragment : Fragment() {
    private lateinit var dateOfStartExploitation: EditText
    private lateinit var dateOfEndExploitation: EditText
    private val dateStart = Calendar.getInstance()
    private val dateEnd = Calendar.getInstance()

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_exploitation, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        initViews(view)
        dateOfStartListener()
        dateOfEndListener()
    }

    private fun initViews(view: View){
        dateOfEndExploitation = view.findViewById(R.id.dateOfEndExploitationEditText)
        dateOfStartExploitation = view.findViewById(R.id.dateOfStartExploitationEditText)
    }

    private fun dateOfStartListener(){
        val datePickerListener = DatePickerDialog.OnDateSetListener { datePicker, i, i2, i3 ->
            dateStart.set(Calendar.YEAR, i)
            dateStart.set(Calendar.MONTH, i2)
            dateStart.set(Calendar.DAY_OF_MONTH, i3)
            updateDateOfStartEditText()
        }

        dateOfStartExploitation.setOnClickListener {
            DatePickerDialog(
                requireContext(),
                datePickerListener,
                dateStart.get(Calendar.YEAR),
                dateStart.get(Calendar.MONTH),
                dateStart.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
    }

    private fun updateDateOfStartEditText(){
        val format = "dd.MM.yyyy"
        val simpleDateFormat = SimpleDateFormat(format, Locale.ENGLISH)
        dateOfStartExploitation.setText(simpleDateFormat.format(dateStart.time))
    }

    private fun dateOfEndListener(){
        val datePickerListener = DatePickerDialog.OnDateSetListener { datePicker, i, i2, i3 ->
            dateEnd.set(Calendar.YEAR, i)
            dateEnd.set(Calendar.MONTH, i2)
            dateEnd.set(Calendar.DAY_OF_MONTH, i3)
            updateDateOfEndEditText()
        }

        dateOfEndExploitation.setOnClickListener {
            DatePickerDialog(
                requireContext(),
                datePickerListener,
                dateEnd.get(Calendar.YEAR),
                dateEnd.get(Calendar.MONTH),
                dateEnd.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
    }

    private fun updateDateOfEndEditText(){
        val format = "dd.MM.yyyy"
        val simpleDateFormat = SimpleDateFormat(format, Locale.ENGLISH)
        dateOfEndExploitation.setText(simpleDateFormat.format(dateEnd.time))
    }

    companion object {
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            ExploitationFragment().apply {
                arguments = Bundle().apply {
                }
            }
    }

}