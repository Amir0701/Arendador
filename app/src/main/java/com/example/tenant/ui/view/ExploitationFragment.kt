package com.example.tenant.ui.view

import android.app.DatePickerDialog
import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.Button
import android.widget.EditText
import com.example.tenant.R
import com.example.tenant.data.model.Exploitation
import com.example.tenant.ui.model.NewExploitationActivityViewModel
import com.google.android.material.textfield.TextInputLayout
import java.text.SimpleDateFormat
import java.util.*

class ExploitationFragment : Fragment() {
    private lateinit var dateOfStartExploitation: EditText
    private lateinit var dateOfEndExploitation: EditText
    private lateinit var dateOfStartExploitationLayout: TextInputLayout
    private val dateStart = Calendar.getInstance()
    private val dateEnd = Calendar.getInstance()
    private lateinit var nameEditText: EditText
    private lateinit var nameLayout: TextInputLayout
    private lateinit var sumEditText: EditText
    private lateinit var statyaRas: EditText
    private lateinit var addExploitationButton: Button

    private lateinit var viewModel: NewExploitationActivityViewModel

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        // Inflate the layout for this fragment
        return inflater.inflate(R.layout.fragment_exploitation, container, false)
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        initViews(view)
        dateOfStartListener()
        dateOfEndListener()

    }

    override fun onStart() {
        super.onStart()
        viewModel = (activity as NewExploitationActivity).newExploitationActivityViewModel
        addExploitationButton.setOnClickListener {
            getExploitation()?.let {
                viewModel.addExploitation(it)
                activity?.finish()
            }
        }
    }
    private fun initViews(view: View){
        dateOfEndExploitation = view.findViewById(R.id.dateOfEndExploitationEditText)
        dateOfStartExploitation = view.findViewById(R.id.dateOfStartExploitationEditText)
        nameEditText = view.findViewById(R.id.nameExploitationEditText)
        nameLayout = view.findViewById(R.id.nameExploitationInputLayout)
        sumEditText = view.findViewById(R.id.sumOfExploitationEditText)
        statyaRas = view.findViewById(R.id.expenditureEditText)
        addExploitationButton = view.findViewById(R.id.addExploitationButton)
        dateOfStartExploitationLayout = view.findViewById(R.id.dateOfStartExploitationInputLayout)
    }

    private fun getExploitation(): Exploitation?{
        val name = getName()
        val startDate = getStartDate()
        val endDate = getEndDate()
        val sum = getSum()
        val s = getStatyaRas()
        if(name != null && startDate != null){
            (activity as NewExploitationActivity).id?.let {objId->
                return Exploitation(0, objId, sum, name, startDate, endDate, s)
            }
        }

        return null
    }

    private fun getName(): String?{
        return if(nameEditText.text.toString().isNotEmpty()){
            nameLayout.helperText = ""
            nameEditText.text.toString()
        }else{
            nameLayout.helperText = requireContext().resources.getString(R.string.fillIn)
            null
        }
    }

    private fun getStartDate(): Date?{
        return if(dateOfStartExploitation.text.toString().isNotEmpty()){
            dateOfStartExploitationLayout.helperText = ""
            dateStart.time
        }else{
            dateOfStartExploitationLayout.helperText = requireContext().resources.getString(R.string.date_fill_in)
            null
        }
    }

    private fun getEndDate(): Date?{
        return if(dateOfEndExploitation.text.toString().isNotEmpty()){
            dateEnd.time
        }else{
            return null
        }
    }

    private fun getSum(): Int?{
        return if(sumEditText.text.toString().isNotEmpty()){
            sumEditText.text.toString().toInt()
        }else{
            null
        }
    }

    private fun getStatyaRas(): String?{
        return if(statyaRas.text.toString().isNotEmpty()){
            statyaRas.text.toString()
        }else{
            return null
        }
    }

    private fun dateOfStartListener(){
        val datePickerListener = DatePickerDialog.OnDateSetListener { datePicker, i, i2, i3 ->
            dateStart.set(Calendar.YEAR, i)
            dateStart.set(Calendar.MONTH, i2)
            dateStart.set(Calendar.DAY_OF_MONTH, i3)
            updateDateOfStartEditText()
        }

        dateOfStartExploitation.setOnClickListener {
            DatePickerDialog(
                requireContext(),
                datePickerListener,
                dateStart.get(Calendar.YEAR),
                dateStart.get(Calendar.MONTH),
                dateStart.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
    }

    private fun updateDateOfStartEditText(){
        val format = "dd.MM.yyyy"
        val simpleDateFormat = SimpleDateFormat(format, Locale.ENGLISH)
        dateOfStartExploitation.setText(simpleDateFormat.format(dateStart.time))
    }

    private fun dateOfEndListener(){
        val datePickerListener = DatePickerDialog.OnDateSetListener { datePicker, i, i2, i3 ->
            dateEnd.set(Calendar.YEAR, i)
            dateEnd.set(Calendar.MONTH, i2)
            dateEnd.set(Calendar.DAY_OF_MONTH, i3)
            updateDateOfEndEditText()
        }

        dateOfEndExploitation.setOnClickListener {
            DatePickerDialog(
                requireContext(),
                datePickerListener,
                dateEnd.get(Calendar.YEAR),
                dateEnd.get(Calendar.MONTH),
                dateEnd.get(Calendar.DAY_OF_MONTH)
            ).show()
        }
    }

    private fun updateDateOfEndEditText(){
        val format = "dd.MM.yyyy"
        val simpleDateFormat = SimpleDateFormat(format, Locale.ENGLISH)
        dateOfEndExploitation.setText(simpleDateFormat.format(dateEnd.time))
    }

    companion object {
        @JvmStatic
        fun newInstance(param1: String, param2: String) =
            ExploitationFragment().apply {
                arguments = Bundle().apply {
                }
            }
    }

}